name: Template - Run Shell Command

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      name:
        type: string
        description: 'Run command short name'
        required: true
      command:
        type: string
        description: 'Run command'
        required: true
      before_command:
        type: string
        description: 'Run preparation commands before the commands'
        required: false
        default: ''
      after_command:
        type: string
        description: 'Run teardown commands after the commands'
        required: false
        default: ''
      assume_aws_role:
        type: boolean
        description: 'Assume AWS role'
        required: false
        default: false
      ecr_login:
        type: boolean
        description: 'Login to ECR'
        required: false
        default: false
      parser:
        type: boolean
        description: 'Enable JUnit Parser after runs'
        required: false
        default: false
      report_paths:
        type: string
        description: 'JUnit Parser report paths'
        required: false
        default: 'outdist/*.xml'


jobs:
  run-commands:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Assume AWS role
        if: inputs.assume_aws_role == true
        id: assume-aws-role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      - name: Login to Amazon ECR
        if: steps.assume-aws-role.outcome == 'success' && inputs.ecr_login == true
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run preparation for ${{ inputs.name }} - ${{ inputs.env }}
        if: inputs.before_command != ''
        id: before-command
        run: ${{ inputs.before_command }}

      - uses: ./.github/actions/slack-message
        if: always() && ${{ vars.SLACK_CHANNEL_ID }} != ''
        id: slack
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          text: "[${{ vars.APP_NAME }} ${{ inputs.env }}] Run ${{ inputs.name }}"

      - name: Run ${{ inputs.name }} - ${{ inputs.env }}
        if: inputs.before_command == '' || steps.before-command.outcome == 'success'
        id: run-command
        run: ${{ inputs.command }}

      - uses: ./.github/actions/slack-message
        if: always() && ${{ vars.SLACK_CHANNEL_ID }} != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          text: "[${{ vars.APP_NAME }} ${{ inputs.env }}] Run ${{ inputs.name }} - completed"
          status: ${{ steps.run-command.outcome }}
          update: ${{ steps.slack.outputs.update }}

      - name: Run teardown for ${{ inputs.name }} - ${{ inputs.env }}
        if: ( success() || failure() ) && inputs.after_command != ''
        id: after-command
        run: ${{ inputs.after_command }}
        continue-on-error: true

      - name: JUnit Parser
        if: ( success() || failure() ) && inputs.parser == true
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: ${{ inputs.report_paths }}

      - name: Set job end status
        if: success() || failure()
        run: |
          if [ "${{ steps.before-command.outcome }}" == "failure" ]; then
            echo "::error step=before-command::Failed to run preparation for ${{ inputs.name }}"; exit 1
          fi
          if [ "${{ steps.run-command.outcome }}" == "failure" ]; then
            echo "::error step=run-command::Failed to run command ${{ inputs.name }}"; exit 2
          fi
          if [ "${{ steps.after-command.outcome }}" == "failure" ]; then
            echo "::warning step=after-command::Failed to run teardown for ${{ inputs.name }}"; exit 0
          fi
