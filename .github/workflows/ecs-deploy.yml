name: Template - ECS Deploy

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      name:
        type: string
        description: 'Deployment name'
        required: false
        default: 'deploy'
      before_command:
        type: string
        description: '(Optional) Command to prepare the environment'
        required: false
        default: ''
      after_command:
        type: string
        description: '(Optional) Command to teardown the environment'
        required: false
        default: ''
      assume_aws_role:
        type: boolean
        description: 'Assume AWS role'
        required: false
        default: true
      ecr_login:
        type: boolean
        description: 'Login to ECR'
        required: false
        default: true
      ecs_cluster:
        type: string
        description: 'ECS cluster name'
        required: true
      ecs_service:
        type: string
        description: 'ECS service name'
        required: true
      image_name:
        type: string
        description: 'Docker image name'
        required: true
      image_tag:
        type: string
        description: 'Docker image tag'
        default: "latest"
        required: false
      timeout:
        type: string
        description: 'ECS deploy timeout(seconds)'
        default: "600"
        required: false
      brief_slack_msg:
        type: string
        description: 'Custom slack message for job end'
        required: false
        default: ''
      custom_registry:
        type: string
        description: 'Custom registry path'
        required: false
        default: ''

    secrets:
      SLACK_BOT_TOKEN:
        required: false
        
env:
  APP_NAME: ${{ vars.APP_NAME }}
  DOCKER_REGISTRY: ${{ inputs.custom_registry || format('{0}.dkr.ecr.{1}.amazonaws.com', vars.AWS_ACCOUNT, vars.AWS_REGION) }}
  DEPLOY_NAME: ${{ inputs.name != '' && inputs.name || format('{0}/{1}', inputs.ecs_cluster, inputs.ecs_service) }}
  SLACK_TITLE: "ECS DEPLOY - ${{ vars.APP_NAME }} -> ${{ inputs.env }}"


jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    name: deploy ${{ inputs.image_name }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      # Slack preparation
      - name: Slack Status file
        if: inputs.brief_slack_msg == ''
        env:
          BEFORE_COMMAND: ${{ inputs.before_command }}
          ECS_SERVICE: ${{ inputs.ecs_service }}
          AFTER_COMMAND: ${{ inputs.after_command }}
        run: |
          echo "*Code Checkout* - success  " > slack_status.txt
          echo "*AWS Assume Role* - $([[ \"${{ inputs.assume_aws_role }}\" == \"true\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*AWS ECR Login* - $([[ \"${{ inputs.ecr_login }}\" == \"true\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Preparation Command* - $([[ -n \"$BEFORE_COMMAND\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Deploy ECS Service ${{ env.DEPLOY_NAME }}* - $([[ -n \"$ECS_SERVICE\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Teardown Command* - $([[ -n \"$AFTER_COMMAND\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*~~~~WORKFLOW~~~~* - _RUNNING_" >> slack_status.txt

      # Slack Workflow start
      - name: Slack Workflow start
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        id: slack
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}

      - name: Assume AWS role
        if: inputs.assume_aws_role == true
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-assume-role
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      - name: AWS ECR Login
        if: inputs.ecr_login == true
        uses: aws-actions/amazon-ecr-login@v2
        id: aws-ecr-login

      # Preparation Command
      - name: Preparation Command
        if: inputs.before_command != ''
        id: before-command
        run: ${{ inputs.before_command }}

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*AWS Assume Role\* - .*|\*AWS Assume Role\* - ${{ steps.aws-assume-role.outcome }}|' slack_status.txt;
            sed -i 's|\*AWS ECR Login\* - .*|\*AWS ECR Login\* - ${{ steps.aws-ecr-login.outcome }}|' slack_status.txt;
            sed -i 's|\*Preparation Command\* - .*|\*Preparation Command\* - ${{ steps.before-command.outcome }}|' slack_status.txt


      # Deploy ECS Service
      - name: Deploy ECS Service ${{ env.DEPLOY_NAME }}
        id: deploy
        uses: silinternational/ecs-deploy@master
        with:
          cluster_cmd: "--cluster"
          cluster: ${{ inputs.ecs_cluster }}
          image_cmd: '--image'
          image: "${{ env.DOCKER_REGISTRY }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          region_cmd: "--region"
          region: ${{ vars.AWS_REGION }}
          service_name_cmd: '--service-name'
          service_name: "${{ inputs.ecs_service }}"
          timeout_cmd: "--timeout"
          timeout: ${{ inputs.timeout }}
        continue-on-error: ${{ inputs.env != 'test' && false || true }}

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*Deploy ECS Service ${{ env.DEPLOY_NAME }}\* - .*|\*Deploy ECS Service ${{ env.DEPLOY_NAME }}\* - ${{ steps.deploy.outcome }}|' slack_status.txt


      # Teardown Command
      - name: Teardown Command
        if: always() && inputs.after_command != ''
        id: after-command
        run: ${{ inputs.after_command }}
        continue-on-error: true

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && inputs.after_command != '' && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*Teardown Command\* - .*|\*Teardown Command\* - ${{ steps.after-command.outcome }}|' slack_status.txt

      # Job End Status
      - name: Set job end status
        if: success() || failure()
        id: end-status
        run: |
          if [[ "${{ steps.before-command.outcome }}" == "failure" ]]; then
            echo "::error step=before-command::Failed to run preparation command!"; exit 1
          fi

          if [[ "${{ steps.deploy.outcome }}" != "success" && "${{ inputs.env }}" != "test" ]]; then
            echo "::error step=build-image::Failed to deploy ECS service ${{ env.DEPLOY_NAME  }}!"; exit 2
          fi

          if [[ "${{ steps.after-command.outcome }}" == "failure" ]]; then
            echo "::warning step=after-command::Failed to run teardown command!"; exit 0
          fi

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i "s|\*~~~~WORKFLOW~~~~\* - .*|\*~~~~WORKFLOW~~~~\* - $([[ \"${{ steps.end-status.outcome }}\" == \"success\" ]] && echo _PASSED_ || echo _FAILED_)|" slack_status.txt

      # Brief Slack msg content
      - name: Download file containing brief slack msg
        uses: actions/download-artifact@v4
        id: briefmsg
        if: inputs.brief_slack_msg != ''
        with:
          name: slack-artifact
          path: slack
        continue-on-error: true
      - name: Format brief slack msg
        if: inputs.brief_slack_msg != ''
        run: |
          [ -f slack/brief_status.txt ] && cat slack/brief_status.txt || (mkdir -p slack ; touch slack/brief_status.txt);
          echo "*${{ inputs.brief_slack_msg }}* - $([[ \"${{ steps.end-status.outcome }}\" == \"success\" ]] && echo _PASSED_ :white_check_mark: || echo _FAILED_ :x:) " >> slack/brief_status.txt
      - name: Upload file containing brief slack msg
        if: inputs.brief_slack_msg != ''
        uses: actions/upload-artifact@v4
        with:
          name: slack-artifact
          path: slack
          overwrite: true
