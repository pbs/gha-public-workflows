name: Template - Run Shell Command

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      before_command:
        type: string
        description: 'Run preparation commands before the commands'
        required: false
        default: ''
      after_command:
        type: string
        description: 'Run teardown commands after the commands'
        required: false
        default: ''
      assume_aws_role:
        type: boolean
        description: 'Assume AWS role'
        required: false
        default: true
      ecr_login:
        type: boolean
        description: 'Login to ECR'
        required: false
        default: true
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      image_build_tag:
        description: 'Docker image build tag'
        required: false
        type: string
        default: latest
      image_test_tag:
        description: 'Docker image test tag'
        required: false
        type: string
        default: 'test'
      dockerfile:
        description: 'Path to the Dockerfile'
        required: false
        default: './Dockerfile'
        type: string
      context:
        description: 'Build context for Docker'
        required: false
        default: '.'
        type: string

env:
  APP_NAME: ${{ inputs.image_name || vars.APP_NAME }}
  DOCKER_REGISTRY: ${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Assume AWS role
        if: inputs.assume_aws_role == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      - name: Login to Amazon ECR
        if: success() && inputs.ecr_login == true
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run preparation
        if: inputs.before_command != ''
        id: before-command
        run: ${{ inputs.before_command }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Create and use a new builder instance
        run: |
          docker buildx create --name builder --use
  
      - uses: ./.github/actions/slack-message
        if: always() && ${{ vars.SLACK_CHANNEL_ID }} != ''
        id: slack
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          text: "[${{ vars.APP_NAME }} ${{ inputs.env }}] Building docker image"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
          builder: builder
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:cache-${{ inputs.image_build_tag }}
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:cache-${{ inputs.image_build_tag }}

      - uses: ./.github/actions/slack-message
        if: always() && ${{ vars.SLACK_CHANNEL_ID }} != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          text: "[${{ vars.APP_NAME }} ${{ inputs.env }}] Building docker image - complete"
          status: ${{ steps.run-command.outcome }}
          update: ${{ steps.slack.outputs.update }}

      - name: Run teardown
        if: ( success() || failure() ) && inputs.after_command != ''
        id: after-command
        run: ${{ inputs.after_command }}
        continue-on-error: true

      - name: Set job end status
        if: success() || failure()
        run: |
          if [ "${{ steps.before-command.outcome }}" == "failure" ]; then
            echo "::error step=before-command::Failed to run preparation for ${{ inputs.name }}"; exit 1
          fi
          if [ "${{ steps.run-command.outcome }}" == "failure" ]; then
            echo "::error step=run-command::Failed to run command ${{ inputs.name }}"; exit 2
          fi
          if [ "${{ steps.after-command.outcome }}" == "failure" ]; then
            echo "::warning step=after-command::Failed to run teardown for ${{ inputs.name }}"; exit 0
          fi
