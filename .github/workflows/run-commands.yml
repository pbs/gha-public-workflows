name: Template - Run Commands

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      name:
        type: string
        description: 'Command name'
        required: true
      before_command:
        type: string
        description: '(Optional) Command to prepare the environment'
        required: false
        default: ''
      command:
        type: string
        description: 'Command to run'
        required: false
        default: ''
      after_command:
        type: string
        description: '(Optional) Command to teardown the environment'
        required: false
        default: ''
      assume_aws_role:
        type: boolean
        description: 'Assume AWS role'
        required: false
        default: true
      ecr_login:
        type: boolean
        description: 'Login to ECR'
        required: false
        default: true
      parser:
        type: boolean
        description: 'Publish test results using JUnit Parser'
        required: false
        default: false
      test_reports:
        type: boolean
        description: 'Create reports in GHA UI pased on pytest xml files'
        required: false
        default: false
      report_paths:
        type: string
        description: 'JUnit Parser report paths'
        required: false
        default: 'outdist/*.xml'
      junit_xml_file:
        type: string
        required: false
      converage_xml_file:
        type: string
        required: false
      brief_slack_msg:
        type: string
        description: 'Custom slack message for job end'
        required: false
        default: ''

    secrets:
      SLACK_BOT_TOKEN:
        required: false
        
env:
  APP_NAME: ${{ vars.APP_NAME }}
  SLACK_TITLE: "RUN COMMAND ${{ inputs.name }} -  ${{ vars.APP_NAME }} -> ${{ inputs.env }}"


jobs:
  run-commands:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      # Get code, permissions and set environment
      - name: Code Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      # Slack preparation
      - name: Slack Status file
        if: inputs.brief_slack_msg == ''
        env:
          BEFORE_COMMAND: ${{ inputs.before_command }}
          COMMAND: ${{ inputs.command }}
          AFTER_COMMAND: ${{ inputs.after_command }}
        run: |
          echo "*Code Checkout* - success " > slack_status.txt
          echo "*AWS Assume Role* - $([[ \"${{ inputs.assume_aws_role }}\" == \"true\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*AWS ECR Login* - $([[ \"${{ inputs.ecr_login }}\" == \"true\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Preparation Command* - $([[ -n \"$BEFORE_COMMAND\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Run Command ${{ inputs.name }}* - $([[ -n \"$COMMAND\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Teardown Command* - $([[ -n \"$AFTER_COMMAND\" ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*Parsing Results* - $([[ \"${{ inputs.parser }}\" == true ]] && echo pending  || echo skipped )" >> slack_status.txt
          echo "*~~~~WORKFLOW~~~~* - _RUNNING_" >> slack_status.txt

      # Slack Workflow start
      - name: Slack Workflow start
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        id: slack
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}

      - name: Assume AWS role
        if: inputs.assume_aws_role == true
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-assume-role
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      - name: AWS ECR Login
        if: inputs.ecr_login == true
        uses: aws-actions/amazon-ecr-login@v2
        id: aws-ecr-login

      # Preparation Command
      - name: Preparation Command
        if: inputs.before_command != ''
        id: before-command
        run: ${{ inputs.before_command }}

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*AWS Assume Role\* - .*|\*AWS Assume Role\* - ${{ steps.aws-assume-role.outcome }}|' slack_status.txt;
            sed -i 's|\*AWS ECR Login\* - .*|\*AWS ECR Login\* - ${{ steps.aws-ecr-login.outcome }}|' slack_status.txt;
            sed -i 's|\*Preparation Command\* - .*|\*Preparation Command\* - ${{ steps.before-command.outcome }}|' slack_status.txt


      # Run Command
      - name: Run Command ${{ inputs.name }}
        if: inputs.command != ''
        id: command
        run: ${{ inputs.command }}

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*Run Command ${{ inputs.name }}\* - .*|\*Run Command ${{ inputs.name }}\* - ${{ steps.command.outcome }}|' slack_status.txt


      # Teardown Command
      - name: Teardown Command
        if: always() && inputs.after_command != ''
        id: after-command
        run: ${{ inputs.after_command }}
        continue-on-error: true

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && inputs.after_command != '' && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*Teardown Command\* - .*|\*Teardown Command\* - ${{ steps.after-command.outcome }}|' slack_status.txt

      - name: JUnit Parser
        if: inputs.parser == true && (${{ steps.command.outcome }} == "SUCCESS" || ${{ steps.command.outcome }} == "FAILURE")
        uses: mikepenz/action-junit-report@v4
        id: parser
        with:
          report_paths: ${{ inputs.report_paths }}
      
      - name: Test Reports
        if: always() && inputs.test_reports == true
        uses: xportation/junit-coverage-report@main
        with:
          junit-path: ${{ inputs.junit_xml_file }}
          coverage-path: ${{ inputs.converage_xml_file }}

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && inputs.parser == true && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|\*Parsing Results\* - .*|\*Parsing Results\* - ${{ steps.parser.outcome }}|' slack_status.txt

      # Job End Status
      - name: Set job end status
        if: success() || failure()
        id: end-status
        run: |
          if [[ "${{ steps.before-command.outcome }}" == "failure" ]]; then
            echo "::error step=before-command::Failed to run preparation command!"; exit 1
          fi

          if [[ "${{ steps.command.outcome }}" == "failure" ]]; then
            echo "::error step=build-image::Failed to run the command!"; exit 2
          fi

          if [[ "${{ steps.after-command.outcome }}" == "failure" ]]; then
            echo "::warning step=after-command::Failed to run teardown command!"; exit 0
          fi

      - name: Update Slack
        uses: pbs/gha-public-workflows/.github/actions/slack-message@main
        if: always() && vars.SLACK_CHANNEL_ID != '' && inputs.brief_slack_msg == ''
        env:
          WF_STATUS: ${{ steps.end-status.outcome }}
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i "s|\*~~~~WORKFLOW~~~~\* - .*|\*~~~~WORKFLOW~~~~\* - $([[ \"${{ steps.end-status.outcome }}\" == \"success\" ]] && echo _PASSED_ || echo _FAILED_)|" slack_status.txt

      # Brief Slack msg content
      - name: Download file containing brief slack msg
        uses: actions/download-artifact@v4
        id: briefmsg
        if: inputs.brief_slack_msg != ''
        with:
          name: slack-artifact
          path: slack
        continue-on-error: true
      - name: Format brief slack msg
        if: inputs.brief_slack_msg != ''
        run: |
          [ -f slack/brief_status.txt ] && cat slack/brief_status.txt || (mkdir -p slack ; touch slack/brief_status.txt);
          echo "*${{ inputs.brief_slack_msg }}* - $([[ \"${{ steps.end-status.outcome }}\" == \"success\" ]] && echo _PASSED_ :white_check_mark: || echo _FAILED_ :x:) " >> slack/brief_status.txt
      - name: Upload file containing brief slack msg
        if: inputs.brief_slack_msg != ''
        uses: actions/upload-artifact@v4
        with:
          name: slack-artifact
          path: slack
          overwrite: true
