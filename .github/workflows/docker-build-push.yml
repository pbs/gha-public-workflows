name: Template - Docker Build/Test/Push

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      before_command:
        type: string
        description: '(Optional) Command to prepare the environment'
        required: false
        default: ''
      test_command:
        type: string
        description: 'Command to test the application'
        required: false
        default: ''
      after_command:
        type: string
        description: '(Optional) Command to teardown the environment'
        required: false
        default: ''
      assume_aws_role:
        type: boolean
        description: 'Assume AWS role'
        required: false
        default: true
      ecr_login:
        type: boolean
        description: 'Login to ECR'
        required: false
        default: true
      secrets_scan:
        type: boolean
        description: 'Scan code for secrets before build'
        required: false
        default: true
      sbom:
        type: boolean
        description: 'Retrieve and push the Docker image SBOM'
        required: false
        default: false
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      image_build_tag:
        description: 'Docker image build tag'
        required: false
        type: string
        default: latest
      image_test_tag:
        description: 'Docker image test tag'
        required: false
        type: string
        default: 'test'
      dockerfile:
        description: 'Path to the Dockerfile'
        required: false
        default: './Dockerfile'
        type: string
      context:
        description: 'Build context for Docker'
        required: false
        default: '.'
        type: string
      parser:
        type: boolean
        description: 'Publish test results using JUnit Parser'
        required: false
        default: false
      report_paths:
        type: string
        description: 'JUnit Parser report paths'
        required: false
        default: 'outdist/*.xml'
      sonarqube:
        type: boolean
        description: 'Submit code coverage to Sonarqube'
        required: false
        default: false


env:
  APP_NAME: ${{ inputs.image_name || vars.APP_NAME }}
  DOCKER_REGISTRY: ${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  SLACK_TITLE: "${{ inputs.image_name || vars.APP_NAME }} ${{ inputs.env }} - DOCKER BUILD-TEST-PUSH"

  # Update the CUSTOM_TAG with 'echo "CUSTOM_TAG=$CUSTOM_TAG" >> "$GITHUB_ENV"' in any step before the push
  CUSTOM_TAG: ''


jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      # Get code, permissions and set environment
      - name: Code Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      # Slack preparation
      - name: Slack Status file
        run: |
          cat > slack_status.txt <<EOL
          Code Checkout - success
          Code Secrets Scan - $([[ "${{ inputs.secrets_scan }}" == "true" ]] && echo "pending" || echo "skipped")
          AWS Assume Role - $([[ "${{ inputs.assume_aws_role }}" == "true" ]] && echo "pending" || echo "skipped")
          AWS ECR Login - $([[ "${{ inputs.ecr_login }}" == "true" ]] && echo "pending" || echo "skipped")
          Preparation Command - $([[ "${{ inputs.before_command }}" != "" ]] && echo "pending" || echo "skipped")
          Docker Build Image - pending
          Docker Test Image - $([[ "${{ inputs.test_commands }}" != "" ]] && echo "pending" || echo "skipped")
          Parse and Publish Test Results - $([[ "${{ inputs.parser }}" != "" ]] && echo "pending" || echo "skipped")
          SonarQube Scan - $([[ "${{ inputs.sonarqube }}" != "" ]] && echo "pending" || echo "skipped")
          Docker Push Image - pending
          Docker Get SBOM File - $([[ "${{ inputs.sbom }}" == "true" ]] && echo "pending" || echo "skipped")
          Docker Publish SBOM File - $([[ "${{ inputs.sbom }}" == "true" ]] && echo "pending" || echo "skipped")
          Teardown Command - $([[ "${{ inputs.after_command }}" != "" ]] && echo "pending" || echo "skipped")
          EOL

      # Slack Workflow start
      - name: Slack Workflow start
        uses: ./.github/actions/slack-message
        if: vars.SLACK_CHANNEL_ID != ''
        id: slack
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}

      # Code Secrets Scan
      - name: Code Secrets Scan
        if: inputs.secrets_scan == true
        id: secrets-scan
        uses: ./.github/actions/secrets-scanning

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && inputs.secrets_scan == true && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Code Secrets Scan - .*|Code Secrets Scan - ${{ steps.secrets-scan.outcome }}' slack_status.txt

      # Assume AWS role
      - name: Assume AWS role
        if: inputs.assume_aws_role == true
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-assume-role
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      # AWS ECR Login
      - name: AWS ECR Login
        if: inputs.ecr_login == true
        uses: aws-actions/amazon-ecr-login@v2
        id: aws-ecr-login

      - name: Run preparation
        if: inputs.before_command != ''
        id: before-command
        run: ${{ inputs.before_command }}

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|AWS Assume Role - .*|AWS Assume Role - ${{ steps.aws-assume-role.outcome }}|' slack_status.txt
            sed -i 's|AWS ECR Login - .*|AWS ECR Login - ${{ steps.aws-ecr-login.outcome }}|' slack_status.txt
            sed -i 's|Preparation Command - .*|Preparation Command - ${{ steps.before-command.outcome }}|' slack_status.txt


      # Docker image build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Create and use a builder instance
        run: |
          docker buildx create --name builder --use

      - name: Docker Build Image
        uses: docker/build-push-action@v6
        id: build-image
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ inputs.image_test_tag }}
          builder: builder
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:cache-${{ inputs.image_build_tag }}
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:cache-${{ inputs.image_build_tag }}

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Docker Build Image - .*|Docker Build Image - ${{ steps.build-image.outcome }}|' slack_status.txt


      # Docker image test
      - name: Docker Test Image
        if: inputs.test_command != ''
        id: test-image
        run: ${{ inputs.test_command }}

      - name: Parse and Publish Test Results
        if: inputs.parser == true
        uses: mikepenz/action-junit-report@v4
        id: parser
        with:
          report_paths: ${{ inputs.report_paths }}
      
      - name: SonarQube Scan
        if: inputs.sonarqube == true
        id: sonarqube
        uses: sonarsource/sonarqube-scan-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      
      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Docker Test Image - .*|Docker Test Image - ${{ steps.test-image.outcome }}|' slack_status.txt
            sed -i 's|Parse and Publish Test Results - .*|Parse and Publish Test Results - ${{ steps.parser.outcome }}|' slack_status.txt
            sed -i 's|SonarQube Scan - .*|SonarQube Scan - ${{ steps.sonarqube.outcome }}|' slack_status.txt    


      # Docker image push
      - name: Docker Push Image
        uses: docker/build-push-action@v6
        id: push-image
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ inputs.image_build_tag }}

      - name: Docker Push Image Custom Tag
        uses: docker/build-push-action@v6
        if: env.CUSTOM_TAG != ''
        id: push-image-custom
        with:
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.CUSTOM_TAG }}

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Docker Push Image - .*|Docker Push Image - ${{ steps.push-image.outcome }}|' slack_status.txt

      # Get and publish image SBOM
      - name: Docker Get SBOM File
        uses: anchore/sbom-action@v0
        if: inputs.sbom == true
        id: sbom
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ inputs.image_build_tag }}
          format: cyclonedx-json
          artifact-name: sbom-${{ env.APP_NAME }}-${{ inputs.image_build_tag }}.spdx.json
          upload-artifact: true

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && inputs.sbom == true && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Docker Get SBOM File - .*|Docker Get SBOM File - ${{ steps.sbom.outcome }}|' slack_status.txt

      # Teardown and job end status
      - name: Run teardown
        if: always() && inputs.after_command != ''
        id: after-command
        run: ${{ inputs.after_command }}
        continue-on-error: true

      - name: Update Slack
        uses: ./.github/actions/slack-message
        if: always() && inputs.sbom == true && vars.SLACK_CHANNEL_ID != ''
        with:
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          title: ${{ env.SLACK_TITLE }}
          update: ${{ steps.slack.outputs.update }}
          status_file_update: |
            sed -i 's|Teardown Command - .*|Teardown Command - ${{ steps.after-command.outcome }}|' slack_status.txt

      - name: Set job end status
        if: success() || failure()
        run: |
          if [[ "${{ steps.before-command.outcome }}" == "failure" ]]; then
            echo "::error step=before-command::Failed to run preparation for ${{ inputs.image_name }} image build"; exit 1
          fi

          if [[ "${{ steps.build-image.outcome }}" == "failure" ]]; then
            echo "::error step=build-image::Failed to build the ${{ inputs.image_name }} image!"; exit 2
          fi

          if [[ "${{ steps.test-image.outcome }}" == "failure" ]]; then
            echo "::error step=test-image::Failed to test the ${{ inputs.image_name }} image!"; exit 3
          fi

          if [[ "${{ steps.push-image.outcome }}" == "failure" ]]; then
            echo "::error step=push-image::Failed to push the ${{ inputs.image_name }} image!"; exit 4
          fi

          if [[ "${{ steps.after-command.outcome }}" == "failure" ]]; then
            echo "::warning step=after-command::Failed to run teardown for ${{ inputs.image_name }} image build"; exit 0
          fi
