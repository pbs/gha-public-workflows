name: Template - Build/Publish

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true

env:
  REPO_BASE: ${{ vars.APP_NAME }}-${{ inputs.env }}
  DOCKER_REGISTRY: ${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

jobs:
  build-publish:
    runs-on: ubuntu-20.04
    environment:
        name: ${{ inputs.env }}
        url: ${{ vars.APP_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@main
        with:
            fetch-depth: 0

      - name: Assume aws role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT }}:role/service/${{ vars.AWS_OIDC_ROLE }}

      - name: Prepare environment - ${{ inputs.env }}
        id: prepare_envs
        run: |
          aws ecr describe-images --registry-id ${{ vars.AWS_ACCOUNT }} --repository-name ${{ env.REPO_BASE }}-web --image-ids=imageTag=latest > ./build/ecs/ecr_tag_info.json
          echo "Running: cat ./build/ecs/ecr_tag_info.json"
          cat ./build/ecs/ecr_tag_info.json
          echo "Running:  bash ./build/ecs/get_release_info.sh > release_info.txt"
          bash ./build/ecs/get_release_info.sh | tee release_info.txt
          RELEASE_INFO=$(cat release_info.txt) >> $GITHUB_OUTPUT
          RELEASE_INFO=$(echo "$RELEASE_INFO" | tr -d '"{}')
          rm ./build/ecs/ecr_tag_info.json

      - uses: slackapi/slack-github-action@v1.26.0
        id: slack-deploy
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "[${{ vars.APP_NAME }} ${{ inputs.env }}] Image build",
              "attachments": [
                {
                  "pretext": "",
                  "color": "${{ env.SLACK_COLOR }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_COLOR: dbab09

      - name: Set prerelease version and prepare FE statics - ${{ inputs.env }}
        env:
          DEPLOYMENT_ENV: ${{ inputs.env }}
        run: |
          echo 'Setting prerelease build...'
          bash ./build/ecs_prerelease_build.sh
          cat angular_test_url.txt
          echo "ANGULAR_TEST_URL=$(cat angular_test_url.txt)" >> $GITHUB_OUTPUT

      - name: Build - ${{ inputs.env }}
        id: build
        run: |
          echo 'Building Docker Container...'
          docker build --no-cache -t ${{ env.REPO_BASE }}-web --target final -f build/ecs/panda.Dockerfile .
          echo 'Docker image built!'
        continue-on-error: true

      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack-deploy.outputs.ts }}
          payload: |
            {
              "text": "[${{ vars.APP_NAME }} ${{ inputs.env }}] Image build - completed",
              "attachments": [
                {
                  "color": "${{ env.SLACK_COLOR }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "${{ steps.build.outcome }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_COLOR: ${{ steps.build.outcome == 'success' && '90ee90' || 'ff0000' }}

      - uses: slackapi/slack-github-action@v1.26.0
        id: slack-publish
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "[${{ vars.APP_NAME }} ${{ inputs.env }}] Image publish",
              "attachments": [
                {
                  "color": "${{ env.SLACK_COLOR }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_COLOR: dbab09

      - name: Publish Container - ${{ inputs.env }}
        if: steps.build.outcome == 'success'
        id: publish
        run: |
          echo 'Pushing Docker Container...'
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.DOCKER_REGISTRY }}

          DATE=$(date "+%Y-%b-%d")
          EPOCH_TIME=$(date "+%s")
          GIT_SHA=$(git rev-parse --short HEAD)
          TAG="${{ env.REPO_BASE }}-web-$GIT_SHA-$DATE-$EPOCH_TIME"

          SPECIFIC_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.REPO_BASE }}-web:$TAG"
          LATEST_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.REPO_BASE }}-web:latest"

          docker tag "${{ env.REPO_BASE }}-web:latest" $SPECIFIC_TAG
          docker tag "${{ env.REPO_BASE }}-web:latest" $LATEST_TAG

          # Even if SPECIFIC_TAG is not used in deployments, push it for tracking and possible rollbacks
          docker push "${{ env.DOCKER_REGISTRY }}/${{ env.REPO_BASE }}-web" --all-tags

          echo $TAG > /tmp/${{ env.REPO_BASE }}-web-tag
          echo $SPECIFIC_TAG >> docker_tags.txt
          cat docker_tags.txt
          echo "DOCKER_TAGS=$(cat docker_tags.txt)" >> $GITHUB_OUTPUT

          echo 'Building and pushing Docker Image... Complete !'
          ENV_NAME="${{ inputs.env }}" uppercase="${lowercase^^}"
          echo "{ENV_NAME_UPPER}=${ENV_NAME^^}"
        continue-on-error: true

      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.slack-publish.outputs.ts }}
          payload: |
            {
              "text": "[${{ vars.APP_NAME }} ${{ inputs.env }}] Image publish - completed",
              "attachments": [
                {
                  "color": "${{ env.SLACK_COLOR }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "${{ steps.build.outcome }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_COLOR: ${{ steps.build.outcome == 'success' && '90ee90' || 'ff0000' }}

      - name: Set job end status
        if: steps.build.outcome != 'success' || steps.publish.outcome != 'success'
        run: |
          if [ "${{ steps.build.outcome }}" == "failure" ]; then
            echo "::error step=build::Failed building the docker image"; exit 1
          fi
          if [ "${{ steps.build.outcome }}" == "failure" ]; then
            echo "::error step=publish::Failed pushing the docker image"; exit 1
          fi
