name: "Build Docker Image"
description: "Build a Docker image with customizable options."
author: "Your Name"
inputs:
  dockerfile:
    description: "Dockerfile path"
    required: false
    default: "Dockerfile"
  context:
    description: "Build context for the Docker image"
    required: false
    default: "."
  image-name:
    description: "Docker image name"
    required: true
  image-tag:
    description: "Docker image tag"
    required: false
    default: "latest"
  build-args:
    description: "Build arguments (comma-separated)"
    required: false
    default: ""
  target:
    description: "Build target (e.g., for multi-stage builds)"
    required: false
    default: ""
  cache-from:
    description: "Cache source images (comma-separated)"
    required: false
    default: ""
  no-cache:
    description: "Disable the build cache"
    required: false
    default: "false"
  pull:
    description: "Always attempt to pull a newer version of the base image"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Build Docker Image
      shell: bash
      run: |
        # Prepare build arguments
        build_args=""
        if [[ -n "${{ inputs.build-args }}" ]]; then
          IFS=',' read -r -a args <<< "${{ inputs.build-args }}"
          for arg in "${args[@]}"; do
            build_args="$build_args --build-arg $arg"
          done
        fi

        # Prepare cache sources
        cache_from=""
        if [[ -n "${{ inputs.cache-from }}" ]]; then
          IFS=',' read -r -a caches <<< "${{ inputs.cache-from }}"
          for cache in "${caches[@]}"; do
            cache_from="$cache_from --cache-from $cache"
          done
        fi

        # Check no-cache and pull options
        no_cache=""
        if [[ "${{ inputs.no-cache }}" == "true" ]]; then
          no_cache="--no-cache"
        fi

        pull=""
        if [[ "${{ inputs.pull }}" == "true" ]]; then
          pull="--pull"
        fi

        # Run the Docker build command
        docker build \
          -f "${{ inputs.dockerfile }}" \
          -t "${{ inputs.image-name }}:${{ inputs.image-tag }}" \
          $build_args \
          $cache_from \
          $no_cache \
          $pull \
          --target "${{ inputs.target }}" \
          "${{ inputs.context }}"